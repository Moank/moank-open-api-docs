openapi: 3.0.0
info:
  title: Moank Partner API
  version: 1.0.0
  description: |
    The Moank Partner API can be used by Moank's partners in order to provide financial products to their end customers within their own application/website.

    #Â Test objects

    Test objects can be used in the staging environment in order to test specific flow. If one of the applicant of the application has its `socialSecurityNumber` equal to one of the test object, the `applicationStatus` returned by Moank for the create application endpoint will always be the same one as described in the following table:

    Social Security Number|Application Status|Comment
    ----------------------|------------------|-------
    199001010009 |`granted` `pending`|Will return `pending` if the application requires bank details and none were provided at this stage. The test event `grant-test-loan` can then be used to update the application to `granted`
    199001011114 |`pending`|-
    199001019992 |`denied`|-

    # Test events

    Test events can be used in the staging environment in order to trigger background process that will update the application status. Test events are not available in the production environment and should only be used for testing. The test events are described in the following table and they can be used in the [Send Application Endpoint](#tag/Application-endpoints/paths/~1application~1{applicationId}~1event/post):

    Test event |Description
    -----------|-----------
    `grant-test-loan`|Triggers a manual review on the application. The application status will be updated to `granted`.
    `sign-test-loan`|Triggers a signature of the loan agreement. The application status will be updated to `signed`.

    # Test banks

    Test banks can be used in the staging environment in order to test specific flow during the applicant's financial details aggregation. This can be usefull to simulate a failure or any specific behavior from the third party that provides the financial details aggregation. The impact of using a test bank is described in the following table:

    Test bank |Description
    -----------|-----------
    `alandsbanken`|Simulate a failure from a third party during the financial details aggregation
    _all other banks_|Simulate a successful aggregation of the financial details

    # Callbacks

    Moank can send callbacks to a Partner when an application status is updated. The events that can be reported via callbacks are described in the following table:

    Event |Description
    ------|-----------
    `granted` |Triggered when the customer went through all the checks performed by Moank's underwriters.
    `signed`  |Triggered when the customer has signed his debt notice using BankID.
    `payed-out`|Triggered when Moank has paid out the money to the end customer or the Partner.
    `denied`   |Triggered when Moank denies a customer because of one of the routine checks performed by Moank's underwriters.

    The actual payload and event names sent during the callback can be customised for each partner in order to match their own specifications.

    # Sequence Diagram
    ## Bank Flow
    For the loan application to reach a `granted` status, Moank needs to have access to the financial details of the applicant. If the applicant did not complete the Bank flow already, Moank will automatically send a link to the applicant as soon as the loan application is created. This link will allow the customer to give access to his bank details without the help of the Partner. The Partner can still generate and send the link manually to the applicant before creating the application.

    <a href="./partner-sequence-diagram-bank-flow.svg" target="_blank">![Sequence Diagram Bank Flow](./partner-sequence-diagram-bank-flow.svg)</a>
    ## Application Flow
    The application flow allows the partner to create a loan application in Moank's system and receive an offer based on the customer data. The application cannot have the possibilty to reach a `granted` status until the bank flow has been completed.

    <a href="./partner-sequence-diagram-application-flow.svg" target="_blank">![Sequence Diagram Application Flow](./partner-sequence-diagram-application-flow.svg)</a>
servers:
- url: https://api.moank.se/api/hooks/partner
  description: Production server
- url: https://staging.api.moank.se/api/hooks/partner
  description: Staging server

paths:
  /bank/get-link:
    post:
      tags:
      - Bank endpoints
      summary: Get Bank Link
      description: Get the Bank link allowing customer to authenticate his bank.
      requestBody:
        $ref: "#/components/requestBodies/getLink"
      responses:
        200:
          $ref: '#/components/responses/link'
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - basic_auth: []

  /bank/send-code:
    post:
      tags:
      - Bank endpoints
      summary: Send Bank Code
      description: Send the Bank code fetched with the Bank link.
      requestBody:
        $ref: "#/components/requestBodies/sendCode"
      responses:
        200:
          $ref: "#/components/responses/sendCode"
        400:
          $ref: "#/components/responses/sendCodeError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
        503:
          $ref: "#/components/responses/serviceError"
      security:
      - basic_auth: []

  /application:
    post:
      tags:
      - Application endpoints
      summary: Create Application
      description: Send a new application to Moank
      requestBody:
        $ref: "#/components/requestBodies/create"
      responses:
        200:
          $ref: "#/components/responses/extendedApplication"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        500:
          $ref: "#/components/responses/serverError"
        503:
          $ref: "#/components/responses/serviceError"
      security:
      - basic_auth: []

  /application/{applicationId}/event:
    post:
      tags:
      - Application endpoints
      summary: Send Application Event
      description: This endpoint can be used to notify Moank that a new action should be taken on the application. If none of the documented events match your needs we can always create new ones.
      parameters:
      - name: applicationId
        in: path
        description: Application's id as set in the application response object
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/event'
      responses:
        200:
          $ref: "#/components/responses/event"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
        503:
          $ref: "#/components/responses/serviceError"
      security:
      - basic_auth: []

  /application/{applicationId}:
    get:
      tags:
      - Application endpoints
      summary: Get application
      description: Fetch an application
      parameters:
      - name: applicationId
        in: path
        description: Application's id as set in the application response object
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/extendedApplication"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - basic_auth: []

  /application/{applicationId}/download-agreement:
    get:
      tags:
      - Application endpoints
      summary: Download Agreement
      description: Fetch the signed agreement after the application has been signed
      parameters:
      - name: applicationId
        in: path
        description: Application's id as set in the application response object
        required: true
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/file"
        400:
          $ref: "#/components/responses/dataError"
        401:
          $ref: "#/components/responses/authError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/serverError"
      security:
      - basic_auth: []

components:
  requestBodies:
    getLink:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
            - socialSecurityNumber
            - bank
            - redirectUrl
            properties:
              socialSecurityNumber:
                $ref: "#/components/schemas/socialSecurityNumber"
              bank:
                $ref: "#/components/schemas/bank"
              redirectUrl:
                type: string
                description: URL where end user will be redirect at the end of the OAuth flow. Custom schemes are supported which can be useful for native applications. Note that these URL needs to be whitelisted by our authentication partner before they can be used
                example: https://example.com/redirect-here
              state:
                type: string
                description: Optional session identifier returned in the redirect url
                example: foo

    sendCode:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
            - socialSecurityNumber
            - code
            properties:
              socialSecurityNumber:
                $ref: "#/components/schemas/socialSecurityNumber"
              code:
                type: string
                description: Bank code fetched with the Bank link.
                example: '123456789'

    create:
      required: true
      description: New Application Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/application"

    event:
      required: true
      description: Send event about application
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/event"

  responses:
    link:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            required:
            - link
            properties:
              link:
                type: string
                description: Bank link allowing customer to authenticate his bank.
                example: "https://redirect-here"

    sendCode:
      description: Successful operation. It returns a list of customer's valid accounts in the selected bank.
      content:
        application/json:
          schema:
            required:
            - bankAccounts
            properties:
              bankAccounts:
                type: array
                items:
                  $ref: "#/components/schemas/bankAccount"

    application:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/application"

    extendedApplication:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/extendedApplication"

    event:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/eventResult"

    loanTerms:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/loanTerms"

    file:
      description: Binary file
      content:
        application/pdf:
          schema:
            type: string
            format: binary

    sendCodeError:
      description: Error when validating bank authentication code
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/sendCodeError"

    dataError:
      description: Invalid data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/dataError"

    authError:
      description: Invalid authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/authError"

    notFoundError:
      description: Application not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/notFoundError"

    serverError:
      description: Internal Server Error. If the problem persists contact the technical support
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serverError"

    serviceError:
      description: Service Error. If the problem persists contact the technical support
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/serviceError"

  schemas:
    socialSecurityNumber:
      type: string
      format: YYYYMMDDXXXX
      description: Swedish personnummer in format YYYYMMDDXXXX
      example: "197202104332"

    bank:
      type: string
      description: Name of customer's bank. The enum values will be provided to the partner.
      example: SEB
      enum:
        - nordea
        - swedbank
        - seb
        - danske-bank
        - handelsbanken
        - sparbanken-syd
        - sbab
        - ica
        - skandia
        - lansforsakringar
        - sparbankerna
        - alandsbanken

    application:
      type: object
      required:
      - amount
      - repaymentTime
      - applicants
      properties:
        referenceId:
          type: string
          description: Partner reference id for the application
          example: "12345"
        amount:
          type: number
          description: Amount requested to borrow in SEK (including refinancing)
          minimum: 0
          exclusiveMinimum: true
          example: 100000
        amountToRefinance:
          type: number
          description: Amount used exclusively to refinance existing loans in SEK
          minimum: 0
          exclusiveMinimum: true
          example: 50000
        repaymentTime:
          type: number
          description: Repayment time requested in months
          minimum: 0
          exclusiveMinimum: true
          example: 24
        preferredInterestRate:
          type: number
          description: Preferred interest rate for the customer in percent. This can be used in case of a special partnership with Moank where the comission of the partner will depend of the interest rate sold to the end customer.
          minimum: 0
          exclusiveMinimum: true
          example: 6.05
        reasonForLoan:
          type: string
          description: Purpose of the loan. The enum values will be provided to the partner.
          enum:
          - down-payment
          - consolidate-loans
          - vehicle
          - rennovation
          - travel
          - shopping
          - studies
          - services
          - financial-security
          - health
          - other
          example: vehicle
        isBorrowingForOwnUse:
          type: boolean
          description: Indicate if customer is applying for a loan for himself or if he is applying on behalf of someone else.
          example: true
        termsApproved:
          type: boolean
          description: Indicate if customer accepted Moank's terms and conditions
          example: true
        canBeProfiled:
          type: boolean
          description: Indicate if customer accepted can be profiled by Moank to take a credit decision
          example: true
        bankAccountId:
          type: string
          description: Unique identifier of the bank account chosen for the payout by the customer from the list of accounts returned by the "/bank/send-code" endpoint
          example: '12345'
        applicants:
          type: array
          items:
            $ref: "#/components/schemas/applicant"

    extendedApplication:
      allOf:
        - $ref: "#/components/schemas/application"
        - type: object
          required:
          - id
          - applicationStatus
          properties:
            id:
              type: string
              description: Unique identifier of the application
              example: '12345'
            applicants:
              type: array
              items:
                $ref: "#/components/schemas/extendedApplicant"
            loanTerms:
              $ref: "#/components/schemas/loanTerms"
            applicationStatus:
              $ref: "#/components/schemas/applicationStatus"

    applicant:
      type: object
      required:
      - socialSecurityNumber
      - email
      - phone
      properties:
        socialSecurityNumber:
          $ref: "#/components/schemas/socialSecurityNumber"
        email:
          type: string
          description: Email of the applicant. Used to communicate loan agreement
          pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i
          example: test@example.com
        phone:
          type: string
          description: Phone number of the applicant (preferably mobile phone). Used to communicate loan agreement if it is a mobile phone number
          format: international or swedish format
          example: "+46731234567"
        isNotPEP:
          type: boolean
          description: Indicate if the customer is politically exposed
          example: true
        economicDetails:
          $ref: "#/components/schemas/economicDetails"
        bankDetails:
          $ref: "#/components/schemas/bankDetails"
        employer:
          $ref: "#/components/schemas/employer"
        comments:
          type: array
          items:
            type: object
            properties:
              comment:
                type: string
                description: Comments that underwriters or the system can use as notes for the applicant or application
                format: string
              date:
                type: string
                description: Date of the comment
                format: date

    extendedApplicant:
      # There is an issue with redoc that cannot display correctly when using allOf. The below specifications are however correct and can be used when the issue is fixed: https://github.com/Redocly/redoc/issues/1154
      # allOf:
      #   - $ref: "#/components/schemas/applicant"
      #   - type: object
      #     required:
      #     - id
      #     properties:
      #       id:
      #         type: string
      #         description: Unique identifier of the applicant
      #         example: '12345'

      # Copy paste of the applicant specifications with the id
      type: object
      required:
      - id
      - socialSecurityNumber
      - email
      - phone
      properties:
        id:
          type: string
          description: Unique identifier of the applicant
          example: '12345'
        socialSecurityNumber:
          $ref: "#/components/schemas/socialSecurityNumber"
        email:
          type: string
          description: Email of the applicant. Used to communicate loan agreement
          pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i
          example: test@example.com
        phone:
          type: string
          description: Phone number of the applicant (preferably mobile phone). Used to communicate loan agreement if it is a mobile phone number
          format: international or swedish format
          example: "+46731234567"
        isNotPEP:
          type: boolean
          description: Indicate if the customer is politically exposed
          example: true
        economicDetails:
          $ref: "#/components/schemas/economicDetails"
        bankDetails:
          $ref: "#/components/schemas/bankDetails"
        employer:
          $ref: "#/components/schemas/employer"

    economicDetails:
      type: object
      properties:
        monthlyIncome:
          type: number
          description: Monthly income of the applicant before taxes in SEK
          example: 30000
          minimum: 0
        monthlyHousing:
          type: number
          description: Monthly cost related to housing in SEK (e.g. monthly rent, monthly housing fees and monthly cost of mortgage). In case the applicant shares the cost with someone else, only his part should be reported.
          example: 8000
          minimum: 0
        monthlyLoans:
          type: number
          description: Monthly cost for repaying other loans in SEK (Does not include mortgage as it is already included in the housing cost)
          example: 1500
          minimum: 0
        mortgageAmount:
          type: number
          description: Total amount of mortgage for that customer in SEK
          example: 2500000
          minimum: 0
        occupation:
          type: string
          description: Type of employment of the applicant. The enum values will be provided to the partner.
          enum:
          - extra-job
          - other
          - pensioner
          - permanent-employment
          - probation-employment
          - selfemployed
          - student
          - temporary-employment
          - unemployed
          example: permanent-employment
        kids:
          type: number
          description: Number of children of the applicant under 18
          example: 2
          minimum: 0
        homeType:
          type: string
          description: Type of accomodation of the applicant. The enum values will be provided to the partner.
          enum:
          - apartment
          - house
          - rent
          - roommate
          example: apartment

    bankDetails:
      type: object
      deprecated: true
      properties:
        bank:
          type: string
          description: Name of customer's bank. The enum values will be provided to the partner.
          example: SEB
          enum:
            - nordea
            - swedbank
            - seb
            - danske-bank
            - handelsbanken
            - sparbanken-syd
            - sbab
            - ica
            - skandia
            - lansforsakringar
            - sparbankerna
            - alandsbanken
          deprecated: true
        clearingNumber:
          type: string
          description: Clearing number of the customer's bank account. 4 or 5 digits depending of the bank (e.g 7428 or 86439)
          pattern: /^\d{4,5}$/
          example: "1234"
          deprecated: true
        accountNumber:
          type: string
          description: Customer's bank account number, excluding the clearing number
          pattern: /^\d{5, 12}$/
          example: "567890"
          deprecated: true

    employer:
      type: object
      properties:
        employedSince:
          type: string
          description: Since when was the applicant is in this employment situation
          format: date
        employedUntil:
          type: string
          description: Date until when the applicant is employed
          format: date
        name:
          type: string
          description: Name of the employer
          example: Moank AB
        phone:
          type: string
          description: Phone of the employer
          format: international or swedish format
          example: "0731234567"
        shouldConnect:
          type: boolean
          description: Indicate if customer wants to be connected to his employer
          example: true

    bankAccount:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the bank account
          example: '12345'
        name:
          type: string
          description: Name of the customer account
          example: Debt Account
        clearingNumber:
          type: string
          description: Clearing number of the customer's bank account. 4 or 5 digits depending of the bank (e.g 7428 or 86439)
          pattern: /^\d{4,5}$/
          example: "1234"
        accountNumber:
          type: string
          description: Customer's bank account number, excluding the clearing number
          pattern: /^\d{5, 12}$/
          example: "567890"

    applicationStatus:
      type: string
      enum:
        - denied
        - pending
        - granted
        - signed
        - payed-out
        - expired
      default: pending
      description: |
        Current status of an application.

        Possible values are
        * denied -> application is denied and no manual review is necessary.
        * pending -> application is preliminary granted but will go through manual review before being granted.
        * granted -> application is granted and no manual review is necessary. Waiting for applicant(s) to sign the loan agreement.
        * signed -> application is signed by applicant(s).
        * payed-out -> loan is payed out.
        * expired -> application is expired.

    loanTerms:
      type: object
      required:
      - amount
      - nominalRate
      - effectiveRate
      - repaymentTime
      - monthlyPayment
      - startupFee
      - administrationFee
      - invoiceFee
      - totalCost
      properties:
        amount:
          type: number
          description: Amount to be paid out (including refinancing)
          minimum: 0
          exclusiveMinimum: true
        nominalRate:
          type: number
          description: Yearly nominal rate of the loan in percent
          minimum: 0
          exclusiveMinimum: true
        effectiveRate:
          type: number
          description: Yearly effective rate of the loan in percent
          minimum: 0
          exclusiveMinimum: true
        repaymentTime:
          type: number
          description: Repayment time of the loan in months
          minimum: 0
          exclusiveMinimum: true
        monthlyPayment:
          type: number
          description: Monthly payment in SEK
          minimum: 0
          exclusiveMinimum: true
        startupFee:
          type: number
          description: One time fee to be paid at the beginning of the loan in SEK
          minimum: 0
        administrationFee:
          type: number
          description: Fee to be paid every month until loan fully re-paid in SEK
          minimum: 0
        invoiceFee:
          type: number
          description: Fee that will be charged for each invoice if the customer does not allow direct debit from their bank account
          minimum: 0
        totalCost:
          type: number
          description: Total cost of loan including all fees, amortisation and interest if following the payment plan
          minimum: 0
          exclusiveMinimum: true

    event:
      type: object
      required:
      - event
      - payload
      properties:
        event:
          type: string
          description: |
            Event about the application. The enum values will be provided to the partner.
            Possible values are
            * use-loan-promise
            * pay-loan
            * grant-test-loan (Only available in staging environment)
            * sign-test-loan (Only available in staging environment)
          example: use-loan-promise
          enum:
            - use-loan-promise
            - pay-loan
            - grant-test-loan
            - sign-test-loan
        payload:
          description: Payload of the event. It will be different based on the event sent
          oneOf:
            - $ref: '#/components/schemas/useLoanPromisePayload'
            - $ref: '#/components/schemas/payLoanPayload'
            - $ref: '#/components/schemas/grantTestLoanPayload'
            - $ref: '#/components/schemas/signTestLoanPayload'

    payLoanPayload:
      type: object

    grantTestLoanPayload:
      type: object

    signTestLoanPayload:
      type: object

    useLoanPromisePayload:
      type: object
      required:
      - amount
      properties:
        amount:
          type: number
          description: Amount requested to borrow in SEK. It has to be less or equal to "loanTerms.amount" value.
          minimum: 0
          exclusiveMinimum: true
          example: 50000
        sendAgreementBy:
          type: array
          description: List of media to be used to send the loan agreement. An empty array will mean that the loan agreement will not be sent automatically to the customer.
          items:
            type: string
            enum:
              - text-message
              - email

    eventResult:
      type: object
      description: Result of the event. It will be different based on the event sent
      oneOf:
        - $ref: '#/components/schemas/useLoanPromiseResult'
        - $ref: '#/components/schemas/payLoanResult'
        - $ref: '#/components/schemas/grantTestLoanResult'
        - $ref: '#/components/schemas/signTestLoanResult'

    payLoanResult:
      type: object

    useLoanPromiseResult:
      type: object
      required:
      - link
      - agreementDetails
      properties:
        link:
          type: string
          deprecated: true
          description: Link to allow customer to sign the application agreement.
          example: 'https://sign-here'
        agreementDetails:
          type: array
          description: Details about the agreement explaining which URL has been sent to which applicant through which medium
          items:
            type: object
            required:
              - applicantId
              - signUrl
              - sentBy
              - email
              - phone
            properties:
              applicantId:
                type: string
                description: Identifier of the applicant, same as the one returned when creating the application
              signUrl:
                type: string
                description: Link to be used by the customer to sign his loan agreement. This link has been sent to the customer using the media described in the "sentBy" array
              sentBy:
                type: array
                description: List of media used to send the sign URL to the customer. If the array is empty the agreement has not been sent to the customer and can then be sent by other mean by the partner. The list of media is not necessarily equal to the once received in the request as it might fail to send the agreement via a specific medium. If a medium is present in the request and not in the response it means that it failed to send the agreement through that medium, the most likely reason being an incorrect email address or phone number.
                items:
                  type: string
                  enum:
                    - text-message
                    - email
              email:
                type: string
                description: Email of the applicant that was used to deliver the agreement link if the "email" medium is present in the "sentBy" array
                example: "test@example.com"
              phone:
                type: string
                description: Phone number of the applicant that was used to deliver the agreement link if the "text-message" medium is present in the "sentBy" array
                example: "+46731234567"

    grantTestLoanResult:
      type: object

    signTestLoanResult:
      type: object

    error:
      type: object
      required:
      - status
      - message
      - errors
      properties:
        status:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Main error reason
        errors:
          type: array
          description: List of errors messages to describe the issue in more details
          items:
            type: string

    dataError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 400
            message:
              example: INVALID_REQUEST
            errors:
              type: array
              items:
                example: Field ... should be defined

    authError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 401
            message:
              example: Unauthorized

    notFoundError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 404
            message:
              example: Application not found

    serverError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 500
            message:
              example: Internal Server Error

    serviceError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 503
            message:
              example: Service unavailable

    sendCodeError:
      allOf:
        - $ref: "#/components/schemas/error"
        - type: object
          properties:
            status:
              example: 400
            message:
              type: string
              description:
                INVALID_REQUEST means that the payload of the request is invalid, check the errors list to get more information.<br/>
                INVALID_TOKEN means that the code passed as parameter was not recognised by our authentication partner, the end user should do the authentication flow again to obtain a new token.<br/>
                INVALID_IDENTITY means that the bank account retrieved using the code does not belong to the socialSecurityNumber, the end user should do the authentication flow again with a different bank where he/she has an account in his/her name.<br/>
                INVALID_ACCOUNTS means that the end user does not have any salary account at the selected bank and needs to redo the authentication flow selecting another bank where he/she has a salary account.
              enum:
                - INVALID_REQUEST
                - INVALID_TOKEN
                - INVALID_IDENTITY
                - INVALID_ACCOUNTS
              example: INVALID_TOKEN

  securitySchemes:
    basic_auth:
      type: "http"
      scheme: "basic"
